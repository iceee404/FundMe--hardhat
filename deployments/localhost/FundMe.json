{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb78a3a989f7fd308c8dfe311e0da93094cc7999fb17bfb07038d27a131ab76f3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "944144",
    "logsBloom": "0x
    "blockHash": "0x352272c7a1f90b14eda17369d5bc967bd21a7cd5aec3f95a9d6c385546422fcc",
    "transactionHash": "0xb78a3a989f7fd308c8dfe311e0da93094cc7999fb17bfb07038d27a131ab76f3",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "944144",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "e6b0ece2f686f488e49d7c4350f698fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n//import \\\"node_modules/@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    // function getVersion() public view returns (uint256){\\n    //     // ETH/USD price feed address of Goerli Network.\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\n    //     return priceFeed.version();\\n    // }\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address fundingAddress\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0x5217dce75c7f314b166bb5e20bd61ec693e4058124d40f09d5e88cda0cfc86ec\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n//import \\\"node_modules/@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        /*\\n       //\\u4e0d\\u9700\\u8981\\u518d\\u786c\\u7f16\\u7801\\u4ef7\\u683c\\u5730\\u5740\\u4e86\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        );\\n        */\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xaad911a7ee6937f429067fd75720d9c832a62e457de13fe51c6c215208f1bef1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200112a3803806200112a833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c610fb262000178600039600081816102b801526105070152610fb26000f3fe60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461012a5780639e87a5cd14610155578063b60d428814610180578063d7b4750c1461018a5761007b565b80630343fb25146100805780630d8e6e2c146100bd5780633ccfd60b146100e85780636b69a592146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a291906108bd565b6101c7565b6040516100b49190610903565b60405180910390f35b3480156100c957600080fd5b506100d261020f565b6040516100df9190610903565b60405180910390f35b3480156100f457600080fd5b506100fd6102b6565b005b34801561010b57600080fd5b506101146104f6565b6040516101219190610903565b60405180910390f35b34801561013657600080fd5b5061013f610503565b60405161014c919061092d565b60405180910390f35b34801561016157600080fd5b5061016a61052b565b60405161017791906109a7565b60405180910390f35b610188610555565b005b34801561019657600080fd5b506101b160048036038101906101ac91906109ee565b61068f565b6040516101be919061092d565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561027957600080fd5b505afa15801561028d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b19190610a30565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461033b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103e65760006001828154811061036157610360610a5d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103de90610abb565b91505061033e565b50600067ffffffffffffffff81111561040257610401610b04565b5b6040519080825280602002602001820160405280156104305781602001602082028036833780820191505090505b50600190805190602001906104469291906107b3565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161046d90610b64565b60006040518083038185875af1925050503d80600081146104aa576040519150601f19603f3d011682016040523d82523d6000602084013e6104af565b606091505b50509050806104f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ea90610bd6565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610594600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346106d790919063ffffffff16565b10156105d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cc90610c42565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106239190610c62565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600182815481106106a5576106a4610a5d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806106e383610713565b90506000670de0b6b3a764000085836106fc9190610cb8565b6107069190610d41565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561075c57600080fd5b505afa158015610770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107949190610dea565b5050509150506402540be400816107ab9190610e65565b915050919050565b82805482825590600052602060002090810192821561082c579160200282015b8281111561082b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906107d3565b5b509050610839919061083d565b5090565b5b8082111561085657600081600090555060010161083e565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061088a8261085f565b9050919050565b61089a8161087f565b81146108a557600080fd5b50565b6000813590506108b781610891565b92915050565b6000602082840312156108d3576108d261085a565b5b60006108e1848285016108a8565b91505092915050565b6000819050919050565b6108fd816108ea565b82525050565b600060208201905061091860008301846108f4565b92915050565b6109278161087f565b82525050565b6000602082019050610942600083018461091e565b92915050565b6000819050919050565b600061096d6109686109638461085f565b610948565b61085f565b9050919050565b600061097f82610952565b9050919050565b600061099182610974565b9050919050565b6109a181610986565b82525050565b60006020820190506109bc6000830184610998565b92915050565b6109cb816108ea565b81146109d657600080fd5b50565b6000813590506109e8816109c2565b92915050565b600060208284031215610a0457610a0361085a565b5b6000610a12848285016109d9565b91505092915050565b600081519050610a2a816109c2565b92915050565b600060208284031215610a4657610a4561085a565b5b6000610a5484828501610a1b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ac6826108ea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610af957610af8610a8c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b4e600083610b33565b9150610b5982610b3e565b600082019050919050565b6000610b6f82610b41565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610bc0600b83610b79565b9150610bcb82610b8a565b602082019050919050565b60006020820190508181036000830152610bef81610bb3565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c2c601b83610b79565b9150610c3782610bf6565b602082019050919050565b60006020820190508181036000830152610c5b81610c1f565b9050919050565b6000610c6d826108ea565b9150610c78836108ea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cad57610cac610a8c565b5b828201905092915050565b6000610cc3826108ea565b9150610cce836108ea565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d0757610d06610a8c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d4c826108ea565b9150610d57836108ea565b925082610d6757610d66610d12565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610d9181610d72565b8114610d9c57600080fd5b50565b600081519050610dae81610d88565b92915050565b6000819050919050565b610dc781610db4565b8114610dd257600080fd5b50565b600081519050610de481610dbe565b92915050565b600080600080600060a08688031215610e0657610e0561085a565b5b6000610e1488828901610d9f565b9550506020610e2588828901610dd5565b9450506040610e3688828901610a1b565b9350506060610e4788828901610a1b565b9250506080610e5888828901610d9f565b9150509295509295909350565b6000610e7082610db4565b9150610e7b83610db4565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610eba57610eb9610a8c565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610ef757610ef6610a8c565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610f3457610f33610a8c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f7157610f70610a8c565b5b82820290509291505056fea264697066735822122076f7f4dd5e5590a0eeeaa53d37e7e44ffac03c16ce55ca6d30f2899bfdd1cc4c64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461012a5780639e87a5cd14610155578063b60d428814610180578063d7b4750c1461018a5761007b565b80630343fb25146100805780630d8e6e2c146100bd5780633ccfd60b146100e85780636b69a592146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a291906108bd565b6101c7565b6040516100b49190610903565b60405180910390f35b3480156100c957600080fd5b506100d261020f565b6040516100df9190610903565b60405180910390f35b3480156100f457600080fd5b506100fd6102b6565b005b34801561010b57600080fd5b506101146104f6565b6040516101219190610903565b60405180910390f35b34801561013657600080fd5b5061013f610503565b60405161014c919061092d565b60405180910390f35b34801561016157600080fd5b5061016a61052b565b60405161017791906109a7565b60405180910390f35b610188610555565b005b34801561019657600080fd5b506101b160048036038101906101ac91906109ee565b61068f565b6040516101be919061092d565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561027957600080fd5b505afa15801561028d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b19190610a30565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461033b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103e65760006001828154811061036157610360610a5d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103de90610abb565b91505061033e565b50600067ffffffffffffffff81111561040257610401610b04565b5b6040519080825280602002602001820160405280156104305781602001602082028036833780820191505090505b50600190805190602001906104469291906107b3565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161046d90610b64565b60006040518083038185875af1925050503d80600081146104aa576040519150601f19603f3d011682016040523d82523d6000602084013e6104af565b606091505b50509050806104f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ea90610bd6565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610594600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346106d790919063ffffffff16565b10156105d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cc90610c42565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106239190610c62565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600182815481106106a5576106a4610a5d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806106e383610713565b90506000670de0b6b3a764000085836106fc9190610cb8565b6107069190610d41565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561075c57600080fd5b505afa158015610770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107949190610dea565b5050509150506402540be400816107ab9190610e65565b915050919050565b82805482825590600052602060002090810192821561082c579160200282015b8281111561082b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906107d3565b5b509050610839919061083d565b5090565b5b8082111561085657600081600090555060010161083e565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061088a8261085f565b9050919050565b61089a8161087f565b81146108a557600080fd5b50565b6000813590506108b781610891565b92915050565b6000602082840312156108d3576108d261085a565b5b60006108e1848285016108a8565b91505092915050565b6000819050919050565b6108fd816108ea565b82525050565b600060208201905061091860008301846108f4565b92915050565b6109278161087f565b82525050565b6000602082019050610942600083018461091e565b92915050565b6000819050919050565b600061096d6109686109638461085f565b610948565b61085f565b9050919050565b600061097f82610952565b9050919050565b600061099182610974565b9050919050565b6109a181610986565b82525050565b60006020820190506109bc6000830184610998565b92915050565b6109cb816108ea565b81146109d657600080fd5b50565b6000813590506109e8816109c2565b92915050565b600060208284031215610a0457610a0361085a565b5b6000610a12848285016109d9565b91505092915050565b600081519050610a2a816109c2565b92915050565b600060208284031215610a4657610a4561085a565b5b6000610a5484828501610a1b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ac6826108ea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610af957610af8610a8c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b4e600083610b33565b9150610b5982610b3e565b600082019050919050565b6000610b6f82610b41565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610bc0600b83610b79565b9150610bcb82610b8a565b602082019050919050565b60006020820190508181036000830152610bef81610bb3565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c2c601b83610b79565b9150610c3782610bf6565b602082019050919050565b60006020820190508181036000830152610c5b81610c1f565b9050919050565b6000610c6d826108ea565b9150610c78836108ea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cad57610cac610a8c565b5b828201905092915050565b6000610cc3826108ea565b9150610cce836108ea565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d0757610d06610a8c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d4c826108ea565b9150610d57836108ea565b925082610d6757610d66610d12565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610d9181610d72565b8114610d9c57600080fd5b50565b600081519050610dae81610d88565b92915050565b6000819050919050565b610dc781610db4565b8114610dd257600080fd5b50565b600081519050610de481610dbe565b92915050565b600080600080600060a08688031215610e0657610e0561085a565b5b6000610e1488828901610d9f565b9550506020610e2588828901610dd5565b9450506040610e3688828901610a1b565b9350506060610e4788828901610a1b565b9250506080610e5888828901610d9f565b9150509295509295909350565b6000610e7082610db4565b9150610e7b83610db4565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610eba57610eb9610a8c565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610ef757610ef6610a8c565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610f3457610f33610a8c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f7157610f70610a8c565b5b82820290509291505056fea264697066735822122076f7f4dd5e5590a0eeeaa53d37e7e44ffac03c16ce55ca6d30f2899bfdd1cc4c64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}